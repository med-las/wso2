<?xml version="1.0" encoding="UTF-8"?>
<template name="transformDocumentResponse" xmlns="http://ws.apache.org/ns/synapse">
    <sequence>
        <log level="custom">
            <property name="MESSAGE" value="Transforming OpenText response to banking format"/>
        </log>
        <script language="js">
            <![CDATA[
                var payload = mc.getPayloadJSON();
                var statements = [];
                
                // Log the total count safely
                var totalCount = 0;
                if (payload && payload.collection && payload.collection.paging) {
                    totalCount = payload.collection.paging.total_count || 0;
                }
                mc.setProperty("RESULT_COUNT", totalCount.toString());
                
                if (totalCount > 0 && payload.results && payload.results.length > 0) {
                    for (var i = 0; i < payload.results.length; i++) {
                        var doc = payload.results[i];
                        var docName = "";
                        var docId = "";
                        var mimeType = "";
                        
                        // Safely access nested properties
                        if (doc.data && doc.data.properties) {
                            docName = doc.data.properties.name || "";
                            docId = doc.data.properties.id ? doc.data.properties.id.toString() : "";
                            mimeType = doc.data.properties.mime_type || "";
                        }
                        
                        // FIXED: Extract date from document name (look for YYYYMMDD pattern)
                        var docDate = "";
                        // Look for 8-digit date pattern (YYYYMMDD)
                        var dateMatch = docName.match(/(\d{8})/);
                        if (dateMatch) {
                            var dateStr = dateMatch[1];
                            // Validate it's a reasonable date (starts with 19xx or 20xx)
                            if (dateStr.substring(0,2) === "19" || dateStr.substring(0,2) === "20") {
                                docDate = dateStr.substring(0, 4) + "-" + 
                                         dateStr.substring(4, 6) + "-" + 
                                         dateStr.substring(6, 8);
                            }
                        }
                        
                        // If no valid date found, use current date
                        if (!docDate) {
                            var today = new Date();
                            var year = today.getFullYear();
                            var month = today.getMonth() + 1;
                            var day = today.getDate();
                            
                            // Manual padding instead of padStart
                            var monthStr = month < 10 ? "0" + month : month.toString();
                            var dayStr = day < 10 ? "0" + day : day.toString();
                            
                            docDate = year + "-" + monthStr + "-" + dayStr;
                        }
                        
                        // Get reference number from context
                        var referenceNo = mc.getProperty("referenceNo") || 
                                        mc.getProperty("REFERENCE_NO") || 
                                        "REF-" + Date.now();
                        
                        // FIXED: Ensure partyId is 6 digits
                        var partyId = mc.getProperty("PARTY_ID") || "";
                        if (partyId && partyId.length < 6) {
                            partyId = "000000".substring(0, 6 - partyId.length) + partyId;
                        }
                        
                        // FIXED: Better document format detection
                        var docFormat = "UNKNOWN";
                        if (mimeType === "application/pdf") {
                            docFormat = "PDF";
                        } else if (mimeType === "text/csv") {
                            docFormat = "CSV";
                        } else if (mimeType === "application/vnd.ms-excel" || mimeType === "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet") {
                            docFormat = "XLS";
                        } else if (mimeType === "text/xml" || mimeType === "application/xml") {
                            docFormat = "XML";
                        } else if (docName.toLowerCase().endsWith(".pdf")) {
                            docFormat = "PDF";
                        } else if (docName.toLowerCase().endsWith(".xml")) {
                            docFormat = "XML";
                        } else if (docName.toLowerCase().endsWith(".csv")) {
                            docFormat = "CSV";
                        } else if (docName.toLowerCase().endsWith(".xls") || docName.toLowerCase().endsWith(".xlsx")) {
                            docFormat = "XLS";
                        }
                        
                        var statement = {
                            "fromDate": mc.getProperty("STATEMENT_FROM") || "",
                            "toDate": mc.getProperty("STATEMENT_TO") || "",
                            "DocDate": docDate,
                            "referenceNo": referenceNo,
                            "documentId": docId,
                            "accountId": mc.getProperty("ACCOUNT_ID") || "",
                            "partyId": partyId,
                            "documentName": docName,
                            "documentType": mc.getProperty("DOC_TYPE") || "",
                            "documentStatus": "A", // Force to 'A' for all documents as per spec
                            "docFormat": docFormat
                        };
                        
                        statements.push(statement);
                    }
                }
                
                var response = {
                    "result": {
                        "status": "SUCCESS"
                    },
                    "statements": statements
                };
                
                if (statements.length === 0) {
                    response.message = "No documents found for the specified criteria";
                }
                
                mc.setPayloadJSON(response);
            ]]>
        </script>
        <log level="custom">
            <property name="MESSAGE" value="Response transformation completed"/>
            <property name="STATEMENT_COUNT" expression="$ctx:RESULT_COUNT"/>
        </log>
    </sequence>
</template>
